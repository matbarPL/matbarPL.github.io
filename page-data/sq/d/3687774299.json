{"data":{"projects":{"edges":[{"node":{"frontmatter":{"title":"Portfolio 1.0","tech":["HTML","CSS","hugo"],"github":"https://github.com/matbarPL/matbarPL.github.io-1.0","youtube":null,"external":"https://matbarpl.github.io/matbarPL.github.io-1.0/"},"html":"<p>In Portfolio 1.0, I built a foundational website using Hugo. This project marked the beginning of my portfolio development journey and showcased my early skills in creating a dynamic online presence. By leveraging Hugo's framework, I was able to efficiently structure and deploy my website, demonstrating basic understanding of web development principles.</p>"}},{"node":{"frontmatter":{"title":"Movie ratings thanks to given personality traits","tech":["python","flask","React","JWT","NumPy","sqlite3"],"github":"https://github.com/matbarPL/moviesperstraits","youtube":null,"external":null},"html":"<p>In this project, I built a movie recommendation system that uses personality traits to suggest films. I leveraged a personality dataset from Kaggle and employed various technologies like Python, Flask, scikit-learn, React, and JWT to create a user-friendly interface. This allows users to input their personality traits and receive personalized movie recommendations.</p>"}},{"node":{"frontmatter":{"title":"Timetable generation using genetic programming","tech":["python","xlsxwriter","xlrd","openpyxl","random"],"github":"https://github.com/matbarPL/Constraint-satisfaction-problem","youtube":null,"external":null},"html":"<p>I developed an AI-powered constraint satisfaction problem solver for timetable generation during a student exchange program. The system was designed to accept constraints for teachers and subjects from an Excel file and employed a genetic algorithm to generate optimal timetables that satisfy all the given constraints. The system effectively generates high-quality timetables within a reasonable timeframe, typically within 4.5 seconds.</p>"}},{"node":{"frontmatter":{"title":"Approximate functions using C++ and genetic programming","tech":["C++","OOP","STL"],"github":"https://github.com/matbarPL/Genetic-programming","youtube":null,"external":null},"html":"<p>The approach involves using non-binary trees to represent expressions in the genetic programming process. I begin by generating an initial population of these expression trees, which are evaluated for their ability to approximate a function of two variables. Through genetic operators such as selection, mutation, and crossover, I iteratively evolve the population toward better solutions. This method leverages the fundamental principles of genetic programming to optimize mathematical expressions efficiently.</p>"}}]}}}